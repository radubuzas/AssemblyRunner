#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

DOCKER_CONFIG_JSON='{
  "auths": {},
  "currentContext": "colima",
  "cliPluginsExtraDirs": [
    "/opt/homebrew/lib/docker/cli-plugins"
  ]
}'


init (){
    echo -e "${GREEN}Checking${NC} if Homebrew is installed..."

    if ! brew --version &> /dev/null; then
        echo -e "${GREEN}Homebrew ${NC}is not installed. Installing now..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        if brew --version &> /dev/null; then
            echo -e "${GREEN}Homebrew installed successfully."
        else
            echo -e "${RED}Homebrew installation failed.\nTry manual installation of Homebrew.\nContat the developer."
        fi
    fi

    echo -e "${GREEN}Installing${NC} docker..."

    brew install --formulae docker docker-completion docker-compose
    brew install --cask docker

    if [[ "$OSTYPE" == "darwin"* ]] && [[ "$(uname -m)" == "arm64" ]]; then
        echo -e "${GREEN}Installing${NC} colima..."
        brew install --formulae colima

        echo $DOCKER_CONFIG_JSON > ~/.docker/config.json

        colima start x86_machine --verbose --arch x86_64 --cpu 2 --memory 4 --disk 5  
    fi
}


check_if_mac_arm64_and_run_colima (){
    if [[ "$OSTYPE" == "darwin"* ]] && [[ "$(uname -m)" == "arm64" ]]; then
        if ! colima list | grep -q 'Running'; then
            echo -e "${Green}Starting colima! This might take a while..."
            colima start x86_machine --verbose --arch x86_64 --cpu 2 --memory 4 --disk 5  
        fi
    fi
}


if [ $# -eq 1 ] && [ $1 == "init" ]; then
    if ls -1 | grep -E 'init' > /dev/null; then
        echo -e "${RED}There exists a file named 'init'. Please remove it and try again if you want to initialize the environment."
        exit 1
    fi
    init
    exit 0
fi

if [ $# -eq 0 ]; then
    program_name=$(ls -1t | grep -E '\.(asm|s)$' | head -n 1)
    # extension=$(sed -r 's/(\.[^.]+$){1}//')

    echo PROGRAM_NAME=$program_name > .env
    echo -e "Going to compile the latest file: ${GREEN}" $program_name

    # check_if_mac_arm64_and_run_colima
    docker-compose up || docker compose up
else
    if [ $1 == 'gdb' ]; then
        program_name=$2
        echo PROGRAM_NAME=$program_name > .env
        echo -e "Going to compile the latest file: ${GREEN}" $program_name

        # check_if_mac_arm64_and_run_colima
        docker-compose -f docker-compose.debug.yml up || docker compose -f docker-compose.debug.yml up

        pid=$!
        wait $pid

        logs=$(docker-compose logs 2>&1 | tr -d '\0') || logs=$(docker compose logs 2>&1 | tr -d '\0')
        if echo "$logs" | head -n 2 | grep -q "assembly_environment  | gcc: fatal error: no input files"; then
            echo -e "${RED}You did not pass the correct file to compile."
            exit 1
        fi
    else
        if [ $# -gt 1 ]; then
            echo "Pass only one argument."
            exit 1
        else
            program_name=$1

            echo -e "Going to compile the latest file: ${GREEN}" $program_name
            # program_name=$(echo $program_name | sed -r 's/(\.[^.]+$){1}//')   # Removes file extension

            echo PROGRAM_NAME=$program_name > .env

            # check_if_mac_arm64_and_run_colima
            docker-compose up || docker compose up
            
            pid=$!
            wait $pid

            logs=$(docker-compose logs 2>&1 | tr -d '\0') || logs=$(docker compose logs 2>&1 | tr -d '\0')
            if echo "$logs" | head -n 2 | grep -q "assembly_environment  | gcc: fatal error: no input files"; then
                echo -e "${RED}You did not pass the correct file to compile."
                exit 1
            fi
        fi
    fi
fi